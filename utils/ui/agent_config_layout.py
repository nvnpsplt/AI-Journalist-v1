import streamlit as st
from utils.assistants import Planner, Writer, Editor, Publisher

def get_layout(agent, agent_instructions):
    """
    Generates a layout for an agent's instructions, allowing users to view, add, and delete instructions.

    Parameters:
        agent (object): The agent object associated with the instructions.
        agent_instructions (list): A list of instructions for the agent.

    Returns:
        None
    """
        
    if "show_new_input" not in st.session_state:
        st.session_state["show_new_input"] = False
    
    # Display the instructions
    for i, instruction in enumerate(agent_instructions):
        inst, delete = st.columns([14,1])
        with inst:
            st.text_input(label=f"Instruction {i+1}", value=instruction, label_visibility="collapsed", key=f"{agent.name}_inst_{i}")
        with delete:
            if st.button(label="‚ùå", key=f"{agent.name}_delete_{i}", use_container_width=True):
                agent_instructions.pop(i)
    
    # Show new text input if 'add instruction' is clicked            
    if st.session_state["show_new_input"]:
        inst, add = st.columns([14,1])
        with inst:
            new_instruction = st.text_input(label="New Instruction", placeholder="Enter your instruction here...", key="new_inst", label_visibility="collapsed")
        with add:
            if st.button(label="Add", type="primary", use_container_width=True, key="add_inst"):
                agent_instructions.append(new_instruction)
                st.session_state["show_new_input"] = False  # Hide the input after adding
                st.rerun()
    
    spacer_left, buttons = st.columns([3, 1])
    with buttons:
        col1, col2 = st.columns(2)
        
        # Add and Save buttons
        with col1:
            if st.button(label="Add Instruction",type="primary", use_container_width=True, key=f"{agent.name}_add_btn"):
                st.session_state["show_new_input"] = True  
                st.rerun()
        with col2:
            if st.button(label="Save", use_container_width=True, key=f"{agent.name}_save_btn"):
                agent.instructions = agent_instructions
                st.success("Saved!")
            
    
def get_config():
    """
    Configures the agent layout by displaying expanders for each agent type (Planner, Writer, Editor, Publisher).
    Each expander contains a subheader and a layout generated by the get_layout function, which allows users to view, add, and delete instructions for the corresponding agent.
    
    Parameters:
        None
    
    Returns:
        None
    """
    st.header("Agent Configuration")
    st.write(":gray[Configure your agents by adding/removing instructions]")
    
    # PLANNER INSTRUCTIONS
    with st.expander("Planner Instructions", expanded=False):
        st.subheader("Planner Instructions")
        planner = Planner()
        planner_instructions = planner.instructions
        
        get_layout(planner,planner_instructions)
        
    # WRITER INSTRUCTIONS
    with st.expander("Writer Instructions", expanded=False):
        st.subheader("Writer Instructions")
        writer = Writer()
        writer_instructions = writer.instructions
        
        get_layout(writer,writer_instructions)
     
    # EDITOR INSTRUCTIONS   
    with st.expander("Planner Instructions", expanded=False):
        st.subheader("Editor Instructions")
        editor = Editor()
        editor_instructions = editor.instructions
        
        get_layout(editor,editor_instructions)
    
    # PUBLISHER INSTRUCTIONS
    with st.expander("Publisher Instructions", expanded=False):
        st.subheader("Publisher Instructions")
        publisher = Publisher()
        publisher_instructions = publisher.instructions
        
        get_layout(publisher,publisher_instructions)
        
        
            
        